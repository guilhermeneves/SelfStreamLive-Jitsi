{
    // NOTE: this is a *SAMPLE* config file, it will need to be configured with
    // values from your environment

    // Where recording files should be temporarily stored
    "recording_directory":"{{ recording_directory }}",
    // The path to the script which will be run on completed recordings
    "finalize_recording_script_path": "{{ recording_processing_script }}",
    "xmpp_environments": [
        {
            // A friendly name for this environment which can be used
            //  for logging, stats, etc.
            "name": "Jitsi",
            // The hosts of the XMPP servers to connect to as part of
            //  this environment
            "xmpp_server_hosts": [
{% if inventory_hostname == groups['central'][0] %}
                "localhost"
{% else %}
                "{{ hostvars[groups['central'][0]]['ansible_default_ipv4']['address'] }}"
{% endif %}
            ],
            // The xmpp domain we'll connect to on the XMPP server
            "xmpp_domain": "{{ meet_domain }}",
            // Jibri will login to the xmpp server as a privileged user 
            "control_login": {
                // The domain to use for logging in
                "domain": "auth.{{ meet_domain }}",
                // The credentials for logging in
                "username": "{{ jibri_user }}",
                "password": "{{ jibri_pass }}"
            },
            // Using the control_login information above, Jibri will join 
            //  a control muc as a means of announcing its availability 
            //  to provide services for a given environment
            "control_muc": {
                "domain": "internal.auth.{{ meet_domain }}",
                "room_name": "jibribrewery",
                "nickname": "{{ jibri_muc_nick }}"
            },
            // All participants in a call join a muc so they can exchange
            //  information.  Jibri can be instructed to join a special muc
            //  with credentials to give it special abilities (e.g. not being
            //  displayed to other users like a normal participant)
            "call_login": {
                "domain": "recorder.{{ meet_domain }}",
                "username": "{{ jibri_user }}",
                "password": "{{ jibri_pass }}"
            },
            // When jibri gets a request to start a service for a room, the room
            //  jid will look like:
            //  roomName@optional.prefixes.subdomain.xmpp_domain
            // We'll build the url for the call by transforming that into:
            //  https://xmpp_domain/subdomain/roomName
            // So if there are any prefixes in the jid (like jitsi meet, which
            //  has its participants join a muc at conference.xmpp_domain) then
            //  list that prefix here so it can be stripped out to generate
            //  the call url correctly
            "room_jid_domain_string_to_strip_from_start": "conference.",
            // The amount of time, in minutes, a service is allowed to continue.
            //  Once a service has been running for this long, it will be
            //  stopped (cleanly).  A value of 0 means an indefinite amount
            //  of time is allowed
            "usage_timeout": "0"
        }
    ]
}
